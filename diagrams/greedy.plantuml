@startuml Жадный алгоритм

start

:Инициализация матрицы расстояний;
:Инициализация матрицы времени;
:Ввод начальной точки
(start_node);
:Инициализация временного лимита за день;
:Ввод количества дней визита;
:Ввод точек к посещению
(points_sequence);
:Запуск функции greedy_algorithm;

:Создание пустого списка routes_per_day, 
который будет содержать маршруты для каждого дня

routes_per_day = [];

:Создание пустого списка time_per_day, 
который будет содержать время для каждого дня

time_per_day = [];

:Создание переменной any_day_possible, которая
будет использоваться для отслеживания возможности 
построения маршрутов хотя бы на один день

any_day_possible = False;

:Множество из указанных точек, которые еще не были посещены

unsatisfied_points = set(points_sequence);

while (Цикл подстановки каждого дня\n\nfor _ in range(days))
    :Сортировка всех возможных маршрутов в порядке убывания их длины
    
    sorted_routes = sorted(generate_routes(unsatisfied_points), key=len, reverse=True);

    :Запуск функции generate_routes для определения списка всех возможных
    маршрутов, которые можно составить из оставшихся точек;

    :Создание пустого списка routes, 
    который будет содержать все возможные маршруты;

    while (Цикл итерации последовательности\nчисел в обратном порядке\n\nfor r in range(len(points_sequence), 0, -1))
        :Сортировка всех возможных маршрутов
        в порядке убывания их длины;

        :Создание всех возможных перестановок
        точек длины каждой r из points_sequence
        и добавление этих перестановок в список routes
        
        routes.extend(permutations(points_sequence, r));
    endwhile

    :Завершение функции generate_routes;

    while (Цикл перебора всех маршрутов\nв отсортированных маршрутах\n\nfor route in sorted_routes)
        :Добавление начальной и конечной 
        точек к текущему маршруту
        
        route = [start_point] + list(route) + [start_point];

        :Вычисление общего времени 
        для текущего маршрута
        
        time = sum(time_matrix[route[i]][route[i+1]] for i in range(len(route)-1));

        if (Общее время текущего маршрута\nне превышает дневной лимит?\n\ntime <= time_limit?) then (Да)
            :Добавление текущего маршрута
            в список routes_per_day
            
            routes_per_day.append(route);

            :Добавление общего времени текущего 
            маршрута в список time_per_day

            time_per_day.append(time);

            while (Цикл перебора всех точек внутри\nтекущего маршрута, исключая\nначальную и конечную точки\n\nfor point in route[1:-1])
                :Удаление текущей точки из множества 
                unsatisfied_points, так как она 
                теперь учтена в маршруте
                
                unsatisfied_points.remove(point);
            endwhile

            :any_day_possible = True, так
            как маршрут найден;
            else (Нет)
        endif
    endwhile
endwhile

if (Маршрут построен?\n\nany_day_possible=True?) then (Да)
    :Вывод: ''Решение жадным алгоритмом:'';

    while (Цикл перебора по всем дням в\nсписке маршрутов routes_greedy\n\nfor i in range(len(routes_greedy)))
        :Запуск функции calculate_total_distance
        для подсчета общего расстояния 
        для текущего маршрута;

        :Вывод номера дня, текущего маршрута,
        времени маршрута и общего расстояния;
    endwhile

    if (В маршруте есть неучтенные точки?\n\nunsatisfied_points=True?) then (Да)
        :Вывод списка непокрытых точек;
        else (Нет)
    endif
    else (Нет)
    :Вывод: ''Невозможно построить маршруты 
    в указанные дни жадным алгоритмом
    
    Попробуйте уменьшить количество точек 
    или увеличить дни пребывания;
endif
stop

@enduml