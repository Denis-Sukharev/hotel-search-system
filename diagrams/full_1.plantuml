@startuml Алгоритм полного перебора за один день

start

:Инициализация матрицы расстояний;
:Инициализация матрицы времени;
:Ввод начальной точки
(start_node);
:Инициализация временного лимита за день;
:Ввод количества дней визита;
:Ввод точек к посещению
(points_sequence);
:Запуск функции brute_force_algorithm;

:Кратчайший путь: shortest_route = 0

Кратчайшее время: shortest_time = float('inf')

Множество из указанных точек, которые еще не были посещены: 
unsatisfied_points = set(points_sequence);

:Генерация всех перестановок точек с 
помощью функции permutations
(all_permutations);

:Запуск цикла перебора всех возможных перестановок 
точек из списка all_permutations;

while (for perm in all_permutations)
    :Создание маршрута, начинающегося с start_point, 
    проходящего через все точки из текущей перестановки 
    perm и заканчивающегося в start_point
    (route);
    :Вычисление общего времени для текущего маршрута route, 
    суммируя время между точками по матрице времени time_matrix
    (time);

    if (time < shortest_time?) then (Да)
        :Обновление shortest_route до текущего маршрута
        shortest_route = route

        Обновление shortest_time до текущего времени
        shortest_time = time;

        :Удаление из множества unsatisfied_points точек посещенных 
        в самом коротком маршруте route, кроме начальной и конечной
        unsatisfied_points -= set(route[1:-1]);

        :bool(shortest_route) = True;
    else (Нет)
        :bool(shortest_route) = False;
    endif
endwhile

if (Маршрут найден? (is_possible=True?)) then (Да)
    :Вывод: ''Маршрут за 1 день полным перебором:''
    маршрут, время, расстояние (вычисление расстояния 
    между каждой парой последовательных 
    точек маршрута и их последующее суммирование);
else (Нет)
    :Запуск алгоритма полного перебора для нескольких дней;
endif

stop

@enduml
